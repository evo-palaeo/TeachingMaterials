data(packages = "TeachingMaterials")
data(package = "TeachingMaterials")
data("birds")
birds
setwd("Dropbox/Work/R_scripts/TeachingMaterials/data/")
load("theropod_ages.Rdata")
load("theropod_ages.Rdata")
load("theropod_tree.Rdata")
library(treesurgeon)
?quick_pars
setwd("..")
setwd("..")
setwd("..")
setwd("Dinos_ontophylo/dinos_noclock/")
theropod_data <- read_nexdat("dinos.nex")
theropod_data <- read_nexdat("dinos.nex")
theropod_ages
theropod_data
names(theropod_data)
names(theropod_data) %in% theropod_tree$tip.label
length(theropod_data) - 5
head(theropod_data, 162)
theropod_data <- head(theropod_data, 162)
names(theropod_data) %in% theropod_tree$tip.label
setwd("..")
setwd("..")
setwd("R_scripts/TeachingMaterials/data/")
save(theropod_data, file = "theropod_data.Rdata")
cont <- get_contrast(theropod_data)
pdat <- phyDat(theropod_data, type = "USER", contrast = cont)
pdat
tree <- acctran(theropod_tree, pdat)
plot(tree)
plot(tree, cex = 0.5)
t <- tree
library(paleotree)
NM <- rep(NA, Nnode(theropod_tree)) #vector of NAs with a length equal to the number of nodes in 'theropod_tree'.
NM[[1]] <- 220 #set the first node to an age of 220.
timetree_equal <- timePaleoPhy(tree = theropod_tree, timeData = theropod_ages, type = "equal", node.mins = NM)
plot(timetree_equal, no.margin = T, cex = 0.3, direction = "upwards")
t2 <- timetree_equal
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2)
plot(t2, cex = 0.5)
plot(res)
plot(res)
res <- numeric()
for(j in 1:100){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(res)
plot(t2, cex = 0.5)
timetree_mbl <- timePaleoPhy(tree = theropod_tree, timeData = theropod_ages, type = "mbl", vartime = 4, node.mins = NM)
plot(timetree_mbl, no.margin = T, cex = 0.3, direction = "upwards")
t2 <- timetree_mbl
res <- numeric()
for(j in 1:100){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, cex = 0.5)
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
phyloDiv(t2)
phyloDiv(t, no.margin = T, cex = 0.3, direction = "upwards")
t
phyloDiv(t, no.margin = T, cex = 0.3, direction = "upwards")
plot(t, no.margin = T, cex = 0.3, direction = "upwards")
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
res <- numeric()
for(j in 1:200){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
\
plot(res)
res <- numeric()
for(j in 1:200){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(res)
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(t, no.margin = T, cex = 0.3, direction = "upwards")
t2 <- timetree_mbl
res <- numeric()
for(j in 1:1000){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
plot(res)
]]
plot(log(res))
plot(log(res), log='x')
plot(log(res), log='x', type = "l")
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
phyloDiv(t2)
edge_cors <- unlist(lapply(trees, function(x) cor(sd(x$edge.length))))
x$edge.length
t2 <- timetree_mbl
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(sd(x$edge.length))))
m_cors <- which(edge_cors == max(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
i
j
edge_cors <- unlist(lapply(trees, function(x) cor(sd(x$edge.length))))
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == max(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
plot(res)
t2 <- timetree_mbl
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == min(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
plot(res)
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(timetree_mbl, no.margin = T, cex = 0.3, direction = "upwards")
phyloDiv(t2)
timetree <- timePaleoPhy(tree = theropod_tree, timeData = theropod_ages, type = "basic", vartime = 1)
plot(timetree)
t2 <- timetree
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == min(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
timetree <- root_node(timetree, 1)
t2 <- timetree
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == min(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
i
j
t2 <- timetree
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) cor(x$edge.length, t$edge.length)))
node_cors <- unlist(lapply(trees, function(x) cor(tail(node.depth.edgelength(x), Nedge(x)), tail(node.depth.edgelength(t), Nedge(t)))))
min_edge <- unlist(lapply(trees, function(x) min(x$edge.length)/max(node.depth.edgelength(x))))
scores <- (rowSums(cbind(nodes1 = node_cors, edges = edge_cors, min = min_edge)))/3
m_cors <- which(scores == max(scores))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
i
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
i
redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
edge
#first pass - find out which descendant edges to modify
tree2 <- tree
desc_edges <- which(tree$edge[,2] %in% Descendants(tree, node = tree$edge[edge,2], type = "all"))
desc_edges <- sample(desc_edges)
min_desc_edge <- min(tree2$edge.length[desc_edges])
leftover <- min_desc_edge - (min_desc_edge * prop)
prop <- 0.5
#first pass - find out which descendant edges to modify
tree2 <- tree
desc_edges <- which(tree$edge[,2] %in% Descendants(tree, node = tree$edge[edge,2], type = "all"))
desc_edges <- sample(desc_edges)
min_desc_edge <- min(tree2$edge.length[desc_edges])
leftover <- min_desc_edge - (min_desc_edge * prop)
tree2$edge.length[edge] <- tree2$edge.length[edge] + leftover
for(i in desc_edges){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] - leftover
kids <- unlist(Descendants(tree2, tree2$edge[i,2], type = "tips"))
if(any(round(node.depth.edgelength(tree2)[kids], 6) < round(node.depth.edgelength(tree)[kids], 6))){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] + leftover
}
}
#second pass, modify only those edges that are required
mod_edges <- which(tree$edge.length != tree2$edge.length)
mod_edges <- mod_edges[which(mod_edges != edge)]
min_mod_edge <- min(tree2$edge.length[mod_edges])
leftover <- min_mod_edge - (min_mod_edge * prop)
tree2 <- tree
tree2$edge.length[edge] <- tree2$edge.length[edge] + leftover
for(i in mod_edges){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] - leftover
kids <- unlist(Descendants(tree2, tree2$edge[i,2], type = "tips"))
if(any(round(node.depth.edgelength(tree2)[kids], 6) < round(node.depth.edgelength(tree)[kids], 6))){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] + leftover
}
}
min(tree2$edge.length[mod_edges])
min(tree2$edge.length[mod_edges])
if(edge %in% internal_edges(tree) == F){
stop("edge must be internal")
}
if(edge %in% internal_edges(tree) == F){
stop("edge must be internal")
}
t2 <- timetree
if(edge %in% internal_edges(tree) == F){
stop("edge must be internal")
}
edge
tree <- timetree
if(edge %in% internal_edges(tree) == F){
stop("edge must be internal")
}
#first pass - find out which descendant edges to modify
tree2 <- tree
desc_edges <- which(tree$edge[,2] %in% Descendants(tree, node = tree$edge[edge,2], type = "all"))
desc_edges <- sample(desc_edges)
min_desc_edge <- min(tree2$edge.length[desc_edges])
leftover <- min_desc_edge - (min_desc_edge * prop)
tree2$edge.length[edge] <- tree2$edge.length[edge] + leftover
for(i in desc_edges){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] - leftover
kids <- unlist(Descendants(tree2, tree2$edge[i,2], type = "tips"))
if(any(round(node.depth.edgelength(tree2)[kids], 6) < round(node.depth.edgelength(tree)[kids], 6))){
tree2$edge.length[[i]] <- tree2$edge.length[[i]] + leftover
}
}
ree2$edge.length
Tree2$edge.length
tree2$edge.length
mod_edges <- which(tree$edge.length != tree2$edge.length)
mod_edges <- mod_edges[which(mod_edges != edge)]
min_mod_edge <- min(tree2$edge.length[mod_edges])
mod_edges
which(tree$edge.length != tree2$edge.length)
t <- timetree
t$edge.length <- t$edge.length + 0.01
plot(t$edge.length)
plot(t)
t$edge.length
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == min(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
t2 <- t
res <- numeric()
for(j in 1:50){
trees <- list()
for(i in 1:1000){
go_up <- sample(c(T, F), 1)
edge <- sample(internal_edges(t2), 1)
if(go_up == T){
trees[[i]] <- redistribute_edge_up(tree = t2, edge = edge, prop = runif(1))
} else {
trees[[i]] <- redistribute_edge_down(tree = t2, edge = edge, prop = runif(1))
}
}
class(trees) <- "multiPhylo"
edge_cors <- unlist(lapply(trees, function(x) sd(x$edge.length)))
m_cors <- which(edge_cors == min(edge_cors))
m_cors <- m_cors[sample(1:length(m_cors))]
res <- c(res, scores[m_cors])
t2 <- trees[[m_cors]]
}
plot(t2, no.margin = T, cex = 0.3, direction = "upwards")
plot(res)
plot(res)
anova(c(0.4107318, 0.4102836, 0.4093139, 0.40330348))
?anova
data <- data.frame(
group = factor(rep(1:4, each = 10)),
value = c(rnorm(10, mean = 5), rnorm(10, mean = 6),
rnorm(10, mean = 7), rnorm(10, mean = 8))
)
data
data.frame(outgroup = c(1:4), mean_error = (c(0.4107318, 0.4102836, 0.4093139, 0.40330348)))
x <- data.frame(outgroup = c(1:4), mean_error = (c(0.4107318, 0.4102836, 0.4093139, 0.40330348)))
anova(x)
anova_result <- aov(mean_error ~ outgroup, data = x)
anova_result
summary(anova_result)
data <- data.frame(
group = factor(rep(1:4, each = 10)),
value = c(rnorm(10, mean = 5), rnorm(10, mean = 6),
rnorm(10, mean = 7), rnorm(10, mean = 8))
)
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
# ANOVA summary
summary(anova_result)
?corHMM
library(corHMM)
?corHMM
