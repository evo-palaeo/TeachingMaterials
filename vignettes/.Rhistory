dataset <- pbdb_occurrences(
base_name = "trilobita",
interval = c("Cambrian", "Silurian"),
show = c("coords", "classext"),
vocab = "pbdb",
limit = "all"
)
library("paleobioDB")
library("fossilbrush")
library("palaeoverse")
library("divDyn")
dataset <- pbdb_occurrences(
base_name = "trilobita",
interval = c("Cambrian", "Silurian"),
show = c("coords", "classext"),
vocab = "pbdb",
limit = "all"
)
head(dataset)
b_ranks <- c("phylum", "class", "order", "family", "genus")
tax_check <- check_taxonomy(dataset, ranks = b_ranks, clean_name = T, resolve_duplicates = T)
dataset <- tax_check$data # replace raw dataset with cleaned dataset
dataset <- look_up(dataset, int_key = interval_key)
# Make sure that any values which could not be matched contain their original values
dataset$interval_max_ma <- ifelse(is.na(dataset$interval_max_ma),
dataset$max_ma,
dataset$interval_max_ma)
dataset$interval_min_ma <- ifelse(is.na(dataset$interval_min_ma),
dataset$min_ma,
dataset$interval_min_ma)
dataset$interval_mid_ma <- (dataset$min_ma + dataset$max_ma)/2
# Rename columns so that new intervals are used for binning
PBDB_cols <- which(colnames(dataset) == "max_ma" | colnames(dataset) == "min_ma")
colnames(dataset)[PBDB_cols] <- c("PBDB_max_ma", "PBDB_min_ma")
GTS2020_cols <- which(colnames(dataset) == "interval_max_ma" | colnames(dataset) == "interval_min_ma")
colnames(dataset)[GTS2020_cols] <- c("max_ma", "min_ma")
# Identify outliers caused by mismatches between numeric ages and stratigraphic ages. Replace these with original ages from the PBDB.
out_min <- boxplot.stats(dataset$min_ma)$out
out_max <- boxplot.stats(dataset$max_ma)$out
out_min_ind <- which(dataset$min_ma %in% out_min)
out_max_ind <- which(dataset$max_ma %in% out_max)
dataset[out_max_ind, GTS2020_cols[[1]]] <- dataset[out_max_ind, PBDB_cols[[1]]]
dataset[out_min_ind, GTS2020_cols[[2]]] <- dataset[out_min_ind, PBDB_cols[[2]]]
dataset$interval_mid_ma <- (dataset$min_ma + dataset$max_ma)/2
# Look at the updated dataset
head(dataset[,c(8, 33:35)])
head(dataset)
pacm<-pacmacro_ranges(dataset,tail.flag=c(0.3,0.35,0.4), rank="genus",srt="max_ma",end="min_ma")
pranges <- pacm$kdensity
head(pranges[which(rowSums(pranges[,5:7]) == 3),]) #taxa with ranges flagged by fossilbrush
dens<-densify(dataset)
plot_dprofile(dens,names(which(rowSums(pranges[,5:7]) == 3))[[1]],exit= FALSE)
abline(v= pacm$kdensity[names(which(rowSums(pranges[,5:7]) == 3))[[1]],"FAD95"],col="blue")
abline(v= pacm$kdensity[names(which(rowSums(pranges[,5:7]) == 3))[[1]],"LAD95"],col="blue")
trimmed_ages <- dataset[,GTS2020_cols]
trimmed_ages[which(rowSums(pranges[,5:7]) == 3),] <- pranges[which(rowSums(pranges[,5:7]) == 3),c(3,4)]
colnames(trimmed_ages) <- c("max_ma", "min_ma")
trimmed_ages <- cbind(trimmed_ages, interval_mid_ma = (trimmed_ages$min_ma + trimmed_ages$max_ma)/2)
colnames(dataset)[seq(GTS2020_cols[1], GTS2020_cols[2])] <- c("GTS2020_max_ma", "GTS2020_interval_mid_ma", "GTS2020__min_ma")
dataset <- cbind(dataset, trimmed_ages)
bins <- time_bins(interval = c("Jurassic", "Neogene"),
rank = "stage",
scale = "GTS2020",
size = 5,
plot = FALSE)
head(bins)
bins <- time_bins(interval = c("Cambrian", "Silurian"),
rank = "stage",
scale = "GTS2020",
size = 5,
plot = FALSE)
head(bins)
dataset <- subset(dataset, min_ma > min(bins$min_ma))
dataset <- subset(dataset, max_ma < max(bins$max_ma))
dataset <- bin_time(occdf = dataset,
bins = bins,
method = 'mid')
table(dataset$n_bins) # the number of occurrences per bin
dd <- divDyn(dataset, bin="bin_midpoint", tax="genus")
head(dd)
plot(dd$bin_midpoint, dd$divRT, # add the points
axes = FALSE,
xlim = rev(range(as.numeric(dd$bin_midpoint), na.rm = TRUE)), # reverse the x-axis
ylab = "Richness (Diversity)", xlab = "",
type = "l", lwd=2, col = "#0e826f")
box()
axis(2) # add a normal axis to the elft side
axis_geo(side = 1, intervals = list("epochs", "periods"))
title(xlab = "Time (Ma)", line = 4)
lines(dd$bin_midpoint, dd$divBC, col="#F7CB15", lwd=2)
lines(dd$bin_midpoint, dd$divSIB, col="#F55D3E", lwd=2)
legend("topleft", legend=c("RT", "BC", "SIB"), col=c("#0e826f", "#F7CB15", "#F55D3E"), lwd=c(2,2,2), bg="white")
